#import inner;

BJSONBool {
    Bool:val
}

BJSONDouble {
    Q:val
}

BJSONInt {
    Z:val
}

BJSONList {
    [BJSON]:items
}

BJSONNull {

}

BJSONObj {
    [Str]:keys,
    [BJSON]:values
}

BJSONStr {
    Str:val
}

BJSON {
    BJSONBool?:bool,
    BJSONDouble?:double,
    BJSONInt?:int,
    BJSONList?:list,
    BJSONNull?:null_,
    BJSONObj?:obj,
    BJSONStr?:str
}

BJSON#parse_BJSON<Str:data> {
    if ([data].len == 0 || data[0] != 'B') {
        abort "Invalid BJSON start";
    };

    [Str]:strs = [Str] [];
    ParsingState:state = ParsingState [1, strs];
    W:string_count = take_VW_int[data][state];
    for (W:i to string_count) {
        W:string_len = take_VW_int[data][state];
        [strs].append[take_bytes[data][state][string_len]];
    };

    Byte:initial_id = take_byte[data][state];
    BJSON:result = parse_BJSON_val[initial_id][data][state];

    if ([data].len != state.i) {
        abort "Invalid BJSON: parsing finished; more data avaliable";
    };

    return result;
}

BJSON#<BJSONObj:obj>.get<Str:key> {
    if ([obj.keys].len != [obj.values].len) {
        abort "BJSONObj number of keys and values must match";
    };
    for (W:i enumerating obj.keys) {
        if ([obj.keys[i]] equals [key]) {
            return obj.values[i];
        };
    };
    abort "Requested key not found";
}
