#import inner;

@super;
BinJSON {}

@extends BinJSON;
BinJSONBool {
    Bool:val
}

@extends BinJSON;
BinJSONDouble {
    Q:val
}

@extends BinJSON;
BinJSONInt {
    Z:val
}

@extends BinJSON;
BinJSONList {
    [:BinJSON]:items
}

@extends BinJSON;
BinJSONNull {

}

@extends BinJSON;
BinJSONObj {
    [Str]:keys,
    [:BinJSON]:values
}

@extends BinJSON;
BinJSONStr {
    Str:val
}

:BinJSON#parse_BinJSON[Str:data] {
    if ([data].len == 0 || data[0] != 'B') {
        abort "Invalid BinJSON start";
    };

    [Str]:strs = [Str] [];
    ParsingState:state = ParsingState [1, strs];
    W:string_count = take_VW_uint[data][state];
    for (W:i to string_count) {
        W:string_len = take_VW_uint[data][state];
        [strs].append[take_bytes[data][state][string_len]];
    };

    Byte:initial_id = take_byte[data][state];
    :BinJSON:result = parse_BinJSON_val[initial_id][data][state];

    if ([data].len != state.i) {
        abort "Invalid BinJSON: parsing finished; more data avaliable";
    };

    return result;
}

Bool#[:BinJSON:binjson].get_bool {
    return [(BinJSONBool)binjson].unwrap.val;
}

Q#[:BinJSON:binjson].get_double {
    return [(BinJSONDouble)binjson].unwrap.val;
}

Z#[:BinJSON:binjson].get_int {
    return [(BinJSONInt)binjson].unwrap.val;
}

[:BinJSON]#[:BinJSON:binjson].get_list {
    return [(BinJSONList)binjson].unwrap.val;
}

Bool#[:BinJSON:binjson].is_null {
    return ![(BinJSONNull)binjson].is_null;
}

BinJSONObj#[:BinJSON:binjson].get_obj {
    return [(BinJSONObj)binjson].unwrap;
}

Str#[:BinJSON:binjson].get_str {
    return [(BinJSONStr)binjson].unwrap.val;
}

:BinJSON#[BinJSONObj:obj].get[Str:key] {
    if ([obj.keys].len != [obj.values].len) {
        abort "BinJSONObj number of keys and values must match";
    };
    for (W:i enumerating obj.keys) {
        if ([obj.keys[i]] equals [key]) {
            return obj.values[i];
        };
    };
    abort "Requested key '{}' not found" % key;
}

Bool#[BinJSONObj:obj].contains_key[Str:target_key] {
    for (Str:key in obj.keys) {
        if ([key] equals [target_key]) {
            return true;
        };
    };
    return false;
}

:BinJSON#[:BinJSON:obj].get[Str:key] {
    return [[obj].get_obj].get[key];
}

Bool#[:BinJSON:obj].contains_key[Str:target_key] {
    return [[obj].get_obj].contains_key[target_key];
}
