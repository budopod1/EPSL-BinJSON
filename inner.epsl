#import binjson;
#import packing;

ParsingState {
    W:i,
    [Str]:strs
}

W#take_VW_int<Str:data><ParsingState:state> {
    W:result = 0;
    W:shift = 0;
    while (true) {
        if ([data].len == state.i) {
            abort "Invalid BJSON VW int";
        };
        Byte:curByte = data[state.i++];
        result += (curByte & 127) << shift;
        shift += 7;
        if (curByte & 128 == 0) {
            return result;
        };
    };
}

Str#take_Str<Str:data><ParsingState:state> {
    W:idx = take_VW_int[data][state];
    if (idx >= [state.strs].len) {
        abort "Invalid BJSON string index";
    };
    return state.strs[idx];
}

Str#take_bytes<Str:data><ParsingState:state><W:count> {
    W:start = state.i;
    state.i += count;
    if (state.i > [data].len) {
        abort "Invalid BinJSON";
    };
    return [data].slice[start][state.i-1];
}

Byte#take_byte<Str:data><ParsingState:state> {
    if ([data].len == state.i) {
        abort "Invalid BJSON";
    };
    return data[state.i++];
}

BJSONBool#parse_BJSONBool<Str:data><ParsingState:state> {
    return BJSONBool [(Bool)take_byte[data][state]];
}

BJSONDouble#parse_BJSONDouble<Str:data><ParsingState:state> {
    Q:val = unpack_double[data][state.i];
    state.i += 8;
    return BJSONDouble [val];
}

BJSONInt#parse_BJSONInt<Str:data><ParsingState:state> {
    return BJSONInt [take_VW_int[data][state]];
}

BJSONList#parse_BJSONList<Str:data><ParsingState:state> {
    W:len = take_VW_int[data][state];
    [BJSON]:items = [BJSON] [];
    if (len > 0) {
        Byte:sub_id = take_byte[data][state];
        for (W:i to len) {
            [items].append[parse_BJSON_val[sub_id][data][state]];
        };
    };
    return BJSONList [items];
}

BJSONList#parse_BJSONList_multityped<Str:data><ParsingState:state> {
    W:len = take_VW_int[data][state];
    [BJSON]:items = [BJSON] [];
    if (len > 0) {
        for (W:i to len) {
            Byte:sub_id = take_byte[data][state];
            [items].append[parse_BJSON_val[sub_id][data][state]];
        };
    };
    return BJSONList [items];
}

BJSONObj#parse_BJSONObj<Str:data><ParsingState:state> {
    W:len = take_VW_int[data][state];
    [Str]:keys = [Str] [];
    [BJSON]:values = [BJSON] [];
    for (W:i to len) {
        [keys].append[take_Str[data][state]];
        Byte:val_id = take_byte[data][state];
        [values].append[parse_BJSON_val[val_id][data][state]];
    };
    return BJSONObj [keys, values];
}

BJSONStr#parse_BJSONStr<Str:data><ParsingState:state> {
    return BJSONStr [take_Str[data][state]];
}

BJSON#parse_BJSON_val<Byte:id><Str:data><ParsingState:state> {
    switch (id)
        (1) {
            return BJSON [parse_BJSONBool[data][state], null, null, null, null, null, null];
        }
        (2) {
            return BJSON [null, parse_BJSONDouble[data][state], null, null, null, null, null];
        }
        (3) {
            return BJSON [null, null, parse_BJSONInt[data][state], null, null, null, null];
        }
        (4) {
            return BJSON [null, null, null, parse_BJSONList[data][state], null, null, null];
        }
        (5) {
            return BJSON [null, null, null, null, BJSONNull [], null, null];
        }
        (6) {
            return BJSON [null, null, null, null, null, parse_BJSONObj[data][state], null];
        }
        (7) {
            return BJSON [null, null, null, null, null, null, parse_BJSONStr[data][state]];
        }
        (8) {
            return BJSON [null, null, null, parse_BJSONList_multityped[data][state], null, null, null];
        }
        {
            abort "Invalid BJSON ID";
        };
}
